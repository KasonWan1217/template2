AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  sam-api-sample-2

  Sample SAM Template for sam-api-sample-2

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Runtime: java11
    Timeout: 180

Parameters:
#  DynamoDBName:
#    Type: String
#    Description: Please enter your DynamoDB Table Name. (Table must exist in the same region where this stack is launched).
#    Default: InboxRecordDBTable

Resources:
  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"

  LambdaGroupPolicies:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "SnsPublishPolicies"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: SNSLogPolicy
            Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:logs:"
                  - !Ref "AWS::Region"
                  - ":"
                  - !Ref "AWS::AccountId"
                  - ":*"
          - Sid: APIAccessForDynamoDB
            Effect: Allow
            Action:
              - dynamodb:DescribeTable
              - dynamodb:PutItem
              - dynamodb:GetItem
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
              - dynamodb:ConditionCheckItem
            Resource: !GetAtt InboxRecordDBTable.Arn
          - Sid: SNSPulishPolicy
            Effect: Allow
            Action:
              - sns:ListTopics
              - sns:Publish
              - sns:ListSubscriptionsByTopic
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:sns:"
                  - !Ref "AWS::Region"
                  - ":"
                  - !Ref "AWS::AccountId"
                  - ":*"
      Roles:
        - Ref: "LambdaExecutionRole"

  SendNotificationFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: PushNotificationSystem/
      Handler: SendNotification::handleRequest
      MemorySize: 512
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        SendNotificationAPI:
          Type: Api
          Properties:
            Path: /SendNotification
            Method: POST

  StoreAckRecordFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: PushNotificationSystem/
      Handler: StoreAckRecord::handleRequest
      MemorySize: 512
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        SendNotificationAPI:
          Type: Api
          Properties:
            Path: /StoreAckRecord
            Method: POST

  InboxRecordDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        -
          AttributeName: "message_id"
          AttributeType: "S"
        -
          AttributeName: "timestamp"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "message_id"
          KeyType: "HASH"
        -
          AttributeName: "timestamp"
          KeyType: "RANGE"
      TableName: "InboxRecordDBTable"
      LocalSecondaryIndexes:
        -
          IndexName: "MessageIDIndex"
          KeySchema:
            -
              AttributeName: "message_id"
              KeyType: "HASH"
            -
              AttributeName: "timestamp"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "ALL"
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      BillingMode: PAY_PER_REQUEST

  AckRecordDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        -
          AttributeName: "targetArn"
          AttributeType: "S"
        -
          AttributeName: "message_id"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "targetArn"
          KeyType: "HASH"
        -
          AttributeName: "message_id"
          KeyType: "RANGE"
      TableName: "AckRecordDBTable"
      LocalSecondaryIndexes:
        -
          IndexName: "TargetArnIndex"
          KeySchema:
            -
              AttributeName: "targetArn"
              KeyType: "HASH"
            -
              AttributeName: "message_id"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "ALL"
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      BillingMode: PAY_PER_REQUEST

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  LambdaExecutionRole:
    Description: "Implicit IAM Role created for All function"
    Value: !GetAtt LambdaExecutionRole.Arn
  SendNotificationAPI:
    Description: "API Gateway endpoint URL for Prod stage for Send Notification Function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/SendNotification/"
  SendNotificationFunction:
    Description: "Send Notification Lambda Function ARN"
    Value: !GetAtt SendNotificationFunction.Arn
  InboxRecordDBTable:
    Description: "InboxRecordDBTable's ARN"
    Value: !GetAtt InboxRecordDBTable.Arn

  StoreAckRecordAPI:
    Description: "API Gateway endpoint URL for Prod stage for Store Ack Record Function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/StoreAckRecord/"
  StoreAckRecordFunction:
    Description: "Store Ack Record Lambda Function ARN"
    Value: !GetAtt StoreAckRecordFunction.Arn

    AckRecordDBTable:
      Description: "AckRecordDBTable's ARN"
      Value: !GetAtt AckRecordDBTable.Arn